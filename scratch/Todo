- front-end
    - *important*: responsive
    - demonstration site (index page)
    - about site
    - comparasion between normal transaction and blockchain transcations
    - user page

- apis
        - account info
            - priv and pub keys
            - name
            - past transactions
            - money
            - <b>existing contracts</b>
            TBH this seems like it can bo acomplished by simply importing the entire object. This is what has happened
        - blockchain
          - ledger list 
        - we want a way to call all of the admin nodes (i.e. banks and shit)
        - a way for a user to enter staking, this will be from the webpage to the
          python script, as the form will contain data about the users staking decisions
        - maybe we give data about the election process for PoS, i.e. which user was elected
    - requests:a
        - get /chain (returns json of block chain)
        - get /block/{block_index}
        - get /mine (just mines?)
        - post /account (with username and password as post data) (get login )
        - post /create_account (with username and password as post data)
        - post /delete_account (with username and password as post data)
        - post /modify_username (with old_username, password and new_username)
        - post /modify_password (with username, old_password and new_password)
        - post /create_transaction (with sender_private_key, recipient_public_key, amount)
        - post /create_contract (with sender_private_key, recipient_public_key, date_closed, amount_in, amount_out)


block-chain {
}

- backend
  - blockchain notes
    - need to have accounts
    - transactions
    - interest
    - smart contracts to define definite financial security (like a hedge fund)
    - proof of stake system

  - blockchain implementation 
    - pip install eventlet, sympy (we dont need socket io)
    - Instantiate blockchain objects
    - Instantiate block
      - genisisBlock()
      - addBlock()

    - mine()
      - consensus algorithm
        - target difficulty
        - consensus through network, each node validates

    - create user object
      - walletCreation()
      
    - contractCreation()
    - transactions()

- sql or csv to store data

- mongodb (saves json data)
- or mysql (Jason can handle it)




ethics
    - privacy
        - anonymous / encrypted ?
        - privacy problems do come in
        - sender and reciever are anonymous
        - secure still
        - not transparent
        - should not be an issue
        - the bank will have internal database to check against the non-hashed version of the public key?
        - the bank will know how it is
    - environnment
        - we use proof of stake

-languages
    - backend
        - python (django or etc, requires http2/3 apis)
            - *important*: prepare for cross domain request
    - frontend
        - option 1: vue or react
            - html
            - css
            - js (web js + node js)
        - option 2: pure frontend (no framework)
            - html
            - css
            - js (web js)



frontend templates
I mean we can have a look on those and see which one to use (feel free to add more)
- https://learning-zone.github.io/website-templates/mobile-app-free-one-page-responsive-html5-landing-page/
- https://learning-zone.github.io/website-templates/midway-free-html5-website-template-for-multi-purpose/
- https://learning-zone.github.io/website-templates/mentor-free-html5-bootstrap-coming-soon-template/
- https://learning-zone.github.io/website-templates/fit-healthy-fitness-and-gym-html5-bootstrap-theme/
- https://learning-zone.github.io/website-templates/elegant-free-multi-purpose-bootstrap-responsive-template/
- https://learning-zone.github.io/website-templates/eat-restaurant-bootstrap-html5-template/
- https://learning-zone.github.io/website-templates/creative-free-responsive-html5-business-template/
- https://learning-zone.github.io/website-templates/cloud-hosting-free-bootstrap-responsive-website-template/
- https://learning-zone.github.io/website-templates/basic-free-html5-template-for-multi-purpose/



philosophy
    - naming schema
        - snake_case
    - paradigm preference?
        - oop
    - style guide?
        - keep it clean, keep it oo





Video ideas:

Have one person screensharing
  - I will host the website
